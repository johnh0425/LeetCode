/* You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself. 

Constraints
- The number of nodes in each linked list is in the range [1, 100].
- 0 <= Node.val <= 9
- It is guaranteed that the list represents a number that does not have leading zeros. */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* lsum = new ListNode();
        ListNode* temp = lsum;
        int fval;
        int sval;
        int carry = 0;
        while (l1 != nullptr || l2 != nullptr) {
            if (l1 != nullptr) {
                fval = l1->val;
                l1 = l1->next;
            }
            else {
                fval = 0;
            }
            if (l2 != nullptr) {
                sval = l2->val;
                l2 = l2->next;
            }
            else {
                sval = 0;
            }
            int sum = fval + sval;
            if (carry > 0) {
                sum++;
                carry--;
            }
            if (sum >= 10) {
                carry++;
                sum = sum - 10;
            }
            temp->next = new ListNode(sum);
            temp = temp->next;
        }
        if (carry > 0) {
            temp->next = new ListNode(carry);
        }
        return lsum -> next;
    }
};
