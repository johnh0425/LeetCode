/* Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Constraints
1 <= s.length <= 104
s consists of parentheses only '()[]{}'. */

class Solution {
public:
    bool isValid(string s) {
        vector<char> str;
        
        for (unsigned int i = 0; i < s.length(); i++) {
            if (s.at(i) == '(' || s.at(i) == '[' || s.at(i) == '{') {
                str.push_back(s.at(i));
            }
            else {
                if (str.empty()) {
                    return false;
                }
                else if ((str.at(str.size() - 1) == '{' && s.at(i) == '}') || (str.at(str.size() - 1) == '[' && s.at(i) == ']')  || (str.at(str.size() - 1) == '(' && s.at(i) == ')')) {
                    str.pop_back();
                }
                else {
                    return false;
                }
            }
        }
        if (str.empty()) {
            return true;
        }
        else {
            return false;
        }
    }
};
