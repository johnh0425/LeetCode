/* Given the head of a linked list, remove the nth node from the end of the list and return its head.

Constraints
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (n == 0) {
            return head;
        }
        ListNode *d = head; 
        int count = 0;
        for (ListNode* temp = head; temp != nullptr; temp = temp -> next) {
            count++;
        }
        if (count == n) {
            ListNode* tem = head;
            head = head -> next;
            delete tem;
            return head;
        }
        if (count == 1 && n == 1) {
            head = nullptr;
            return head;
        }
        for (unsigned int i = 1; i < count - n; i++) {
            d = d -> next;
        }
        ListNode* del = d->next;
        d -> next = del ->next;
        delete del;
        
    return head;   
    }
};
